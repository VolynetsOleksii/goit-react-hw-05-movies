{"version":3,"file":"static/js/957.e7ec17bc.chunk.js","mappings":"sPAuDA,EArDkB,SAAC,GAEZ,IAAD,IADJA,MAASC,EACL,EADKA,MAAOC,EACZ,EADYA,aAAcC,EAC1B,EAD0BA,YAAaC,EACvC,EADuCA,OAAQC,EAC/C,EAD+CA,SAAUC,EACzD,EADyDA,aAEvDC,EAAQJ,EAAW,0CACcA,GACnC,GAEEK,EAAc,IAAIC,KAAKP,GACvBQ,EAAcC,MAAMH,GACtB,UACAA,EAAYI,cAChB,OACE,4BACE,gBAAKC,IAAKN,EAAOO,IAAKb,KACtB,4BACE,iCACGA,QADH,IACGA,EAAAA,EAAS,UAAU,KAAGS,EAA2B,QAGpD,4BACE,0BAAM,gBACN,0BAAoB,GAAfJ,GAAmBS,QAAQ,GAAG,WAErC,4BACE,0BAAM,cACN,uBAAIV,QAEN,4BACE,0BAAM,YACN,wBACGD,GAAUA,EAAOY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OAAkB,wBAAcA,GAALD,EAA3B,cAMjC,E,mCCUD,EAzCqB,WAAO,IAAD,IACjBE,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACjB,GAA0CC,EAAAA,EAAAA,UAAS,CAAC,GAApD,eAAOC,EAAP,KAAsBC,EAAtB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAL,CAEA,IAAMQ,EAAkB,mCAAG,WAAMR,GAAN,iEACzB,KACES,EAAAA,EAAAA,IAAkBT,GAASU,KAAKJ,EAGjC,CAFC,MAAOK,GACPC,EAAAA,GAAAA,MAAY,+CACb,CALwB,2CAAH,sDAQxBJ,EAAmBR,EAVC,CAWrB,GAAE,CAACA,KAEF,iCACE,SAAC,KAAD,CAAMa,GAAE,iBAAEX,QAAF,IAAEA,GAAF,UAAEA,EAAUY,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,IAAnC,UACE,mBAAQC,KAAK,SAAb,SAAsB,eAGxB,SAAC,EAAD,CAAWnC,MAAOwB,KAClB,2BACE,yBACE,SAAC,KAAD,CAAMQ,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,kBAIvB,SAAC,EAAAI,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C","sources":["components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst MovieCard = ({\n  movie: { title, release_date, poster_path, genres, overview, vote_average },\n}) => {\n  const image = poster_path\n    ? `https://image.tmdb.org/t/p/w400/${poster_path}`\n    : '';\n\n  const releaseDate = new Date(release_date);\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n  return (\n    <div>\n      <img src={image} alt={title} />\n      <div>\n        <h2>\n          {title ?? 'Unknown'} ({releaseYear ?? releaseYear})\n        </h2>\n\n        <div>\n          <span>User Score</span>\n          <p>{(vote_average * 10).toFixed(0)}%</p>\n        </div>\n        <div>\n          <span>Overview</span>\n          <p>{overview}</p>\n        </div>\n        <div>\n          <span>Genres</span>\n          <ul>\n            {genres && genres.map(({ id, name }) => <li key={id}>{name}</li>)}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    release_date: PropTypes.string,\n    poster_path: PropTypes.string,\n    overview: PropTypes.string,\n    vote_average: PropTypes.number,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      })\n    ),\n  }).isRequired,\n};\nexport default MovieCard;\n","import { fetchMovieDetails } from 'components/Api/Api';\nimport Loader from 'components/Loader/Loader';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [selectedMovie, setSelectedMovie] = useState({});\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchSelectedMovie = async movieId => {\n      try {\n        fetchMovieDetails(movieId).then(setSelectedMovie);\n      } catch (error) {\n        toast.error(\"Oops, something went wrong, please try again\");\n      }\n    };\n\n    fetchSelectedMovie(movieId);\n  }, [movieId]);\n  return (\n    <>\n      <Link to={location?.state?.from ?? '/'}>\n        <button type=\"button\">Go back</button>\n      </Link>\n\n      <MovieCard movie={selectedMovie} />\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["movie","title","release_date","poster_path","genres","overview","vote_average","image","releaseDate","Date","releaseYear","isNaN","getFullYear","src","alt","toFixed","map","id","name","movieId","useParams","location","useLocation","useState","selectedMovie","setSelectedMovie","useEffect","fetchSelectedMovie","fetchMovieDetails","then","error","toast","to","state","from","type","Suspense","fallback","Loader"],"sourceRoot":""}