{"version":3,"file":"static/js/957.d3355528.chunk.js","mappings":"8PAEMA,EAAU,gCACVC,EAAU,mCAEHC,EAAW,mCAAG,sGACFC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACmBC,EADnB,YADE,uBACjBG,EADiB,EACjBA,KADiB,kBAKlBA,EAAKC,SALa,2CAAH,qDAQjB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,yFACkBJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,8BACWO,EADX,oBAC4BN,EAD5B,2BADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,EAAKC,SAJP,kEAOA,IAAMG,EAAiB,mCAAG,WAAMC,GAAN,yFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACFS,EADE,oBACYR,EADZ,oBADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qD,qICiC9B,EAnDkB,SAAC,GAEZ,IAAD,IADJM,MAASC,EACL,EADKA,MAAOC,EACZ,EADYA,aAAcC,EAC1B,EAD0BA,YAAaC,EACvC,EADuCA,OAAQC,EAC/C,EAD+CA,SAAUC,EACzD,EADyDA,aAEvDC,EAAQJ,EAAW,0CACcA,GACnC,GAEEK,EAAc,IAAIC,KAAKP,GACvBQ,EAAcC,MAAMH,GACtB,UACAA,EAAYI,cAChB,OACE,4BACE,gBAAKC,IAAKN,EAAOO,IAAKb,KACtB,4BACE,iCACGA,QADH,IACGA,EAAAA,EAAS,UAAU,KAAGS,EAA2B,QAGpD,4BACE,0BAAM,gBACN,0BAAoB,GAAfJ,GAAmBS,QAAQ,GAAG,WAErC,4BACE,0BAAM,cACN,uBAAIV,QAEN,4BACE,0BAAM,WACLD,GAAUA,EAAOY,KAAI,gBAAGjB,EAAH,EAAGA,GAAIkB,EAAP,EAAOA,KAAP,OAAkB,wBAAcA,GAALlB,EAA3B,YAK/B,E,mCCUD,EAvCqB,WAAO,IAAD,IACjBmB,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACjB,GAA0CC,EAAAA,EAAAA,UAAS,CAAC,GAApD,eAAOC,EAAP,KAAsBC,EAAtB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,WAAMR,GAAN,iEACzB,KACEpB,EAAAA,EAAAA,IAAkBoB,GAASS,KAAKH,EAGjC,CAFC,MAAOI,GACPC,EAAAA,GAAAA,MAAY,+CACb,CALwB,2CAAH,sDAQxBH,EAAmBR,EACpB,GAAE,CAACA,KAEF,iCACE,SAAC,KAAD,CAAMY,GAAE,iBAAEV,QAAF,IAAEA,GAAF,UAAEA,EAAUW,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,QAAnC,UACE,mBAAQC,KAAK,SAAb,SAAsB,eAGxB,SAAC,EAAD,CAAWjC,MAAOuB,KAClB,2BACE,yBACE,SAAC,KAAD,CAAMO,GAAG,OAAT,SAAgB,qBAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,wBAIvB,SAAC,EAAAI,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C","sources":["components/Api/Api.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '0bf4740b0505867b66253771331711d6';\n\nexport const fetchTrends = async () => {\n  const { data } = await axios.get(\n    `${API_URL}trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n\n  return data.results;\n};\n\nexport async function fetchSearch(query) {\n  const { data } = await axios.get(\n    `${API_URL}search/movie?query=${query}&api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data.results;\n}\n\nexport const fetchMovieDetails = async id => {\n  const { data } = await axios.get(\n    `${API_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const { data } = await axios.get(\n    `${API_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await axios.get(\n    `${API_URL}movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data.results;\n};\n","import PropTypes from 'prop-types';\n\nconst MovieCard = ({\n  movie: { title, release_date, poster_path, genres, overview, vote_average },\n}) => {\n  const image = poster_path\n    ? `https://image.tmdb.org/t/p/w400/${poster_path}`\n    : '';\n\n  const releaseDate = new Date(release_date);\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n  return (\n    <div>\n      <img src={image} alt={title} />\n      <div>\n        <h2>\n          {title ?? 'Unknown'} ({releaseYear ?? releaseYear})\n        </h2>\n\n        <div>\n          <span>User Score</span>\n          <p>{(vote_average * 10).toFixed(0)}%</p>\n        </div>\n        <div>\n          <span>Overview</span>\n          <p>{overview}</p>\n        </div>\n        <div>\n          <span>Genres</span>\n          {genres && genres.map(({ id, name }) => <li key={id}>{name}</li>)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMovieCard.propTypes = {\n    movie: PropTypes.shape({\n    title: PropTypes.string,\n    release_date: PropTypes.string,\n    poster_path: PropTypes.string,\n    overview: PropTypes.string,\n    vote_average: PropTypes.number,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      })\n    ),\n  }).isRequired,\n};\nexport default MovieCard;\n","import { fetchMovieDetails } from 'components/Api/Api';\nimport Loader from 'components/Loader/Loader';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [selectedMovie, setSelectedMovie] = useState({});\n\n  useEffect(() => {\n    const fetchSelectedMovie = async movieId => {\n      try {\n        fetchMovieDetails(movieId).then(setSelectedMovie);\n      } catch (error) {\n        toast.error(\"Oops, something went wrong, please try again\");\n      }\n    };\n\n    fetchSelectedMovie(movieId);\n  }, [movieId]);\n  return (\n    <>\n      <Link to={location?.state?.from ?? '/home'}>\n        <button type=\"button\">Go back</button>\n      </Link>\n\n      <MovieCard movie={selectedMovie} />\n      <ul>\n        <li>\n          <Link to=\"cast\">Watch casting</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Watch reviews</Link>\n        </li>\n      </ul>\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["API_URL","API_KEY","fetchTrends","axios","data","results","fetchSearch","query","fetchMovieDetails","id","movie","title","release_date","poster_path","genres","overview","vote_average","image","releaseDate","Date","releaseYear","isNaN","getFullYear","src","alt","toFixed","map","name","movieId","useParams","location","useLocation","useState","selectedMovie","setSelectedMovie","useEffect","fetchSelectedMovie","then","error","toast","to","state","from","type","Suspense","fallback","Loader"],"sourceRoot":""}